@use 'sass:map';
@use 'vars';

$typography: vars.$typography !default;

// Generates a CSS triangle using borders
//
// $pointy-side             - The word "top", "bottom", "left", "right". Used to indicate the direction the arrow faces.
// $arrow-color             - The color hex at the bottom.
// $transparent-border-size - Width of the transparent borders that effect how the triangle is rendered.
// $color-border-size       - Width of the colored border that effect how the triangle is rendered.
//
// Compatible in Everything we support
@mixin triangle($pointy-side, $arrow-color, $transparent-border-size, $color-border-size) {
  border: $transparent-border-size solid transparent;
  border-#{$pointy-side}: 0;
  border-#{opposite-direction($pointy-side)}: $color-border-size solid $arrow-color;
}

// Generates either a min width, max-width, range, or retina media query
//
// $media-query - One of four keywords: "retina", "min", "max", "minmax". Depending on the word you will get that type of media query output.
// $res       - The size for the breakpoint. Oftern this references a predefined variable. You should probably not have actual values in this field.
// $res2        - Same as $res and only used for minmax media queries to get a range. $res is starting point and $res2 is ending point of the range.
//
// Compatible in IE9+, Everything else.
@mixin  media($media-query, $res: 0, $res2: 0) {
  @if $media-query == retina {
    //sass-lint:disable-block no-vendor-prefixes
    @media only screen and (-webkit-min-device-pixel-ratio: 2), only screen and ( min--moz-device-pixel-ratio: 2), only screen and ( -o-min-device-pixel-ratio: 2 / 1), only screen and ( min-device-pixel-ratio: 2), only screen and ( min-resolution: 192dpi), only screen and ( min-resolution: 2dppx) {
      @content;
    }
  }

  @if $media-query == min {
    @media screen and ( min-width: $res ) {
      @content;
    }
  }
  @if $media-query == max {
    @media screen and ( max-width: $res ) {
      @content;
    }
  }
}

@mixin remheight($font-size, $line-height, $base-font-size: map.get($typography, base-font-size)) {
  line-height: (strip-unit($line-height) * strip-unit($base-font-size)) / (strip-unit($font-size) * strip-unit($base-font-size));
}

@mixin placeholder
{
    &::-webkit-input-placeholder {@content}
    &:-moz-placeholder           {@content}
    &::-moz-placeholder          {@content}
    &:-ms-input-placeholder      {@content}
}

// Remove the unit of a length
// @param {Number} $number - Number to remove unit from
// @return {Number} - Unitless number
@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }

  @return $number;
}